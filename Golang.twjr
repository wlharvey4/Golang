\input texinfo   @c -*- mode: texinfo -*-

@c FILE    Golang.twjr
@c VERSION 0.1.6
@c DATE    2018-11-13T05:55
@c AUTHOR  wlharvey4

@c *****************************************************************************
@c %**start of header

@setfilename  Golang.info
@settitle     Golang

@c %**end of header
@c *****************************************************************************

@c -----------------------------------------------------------------------------
@set TITLE      About The Go Language
@set SHORTTITLE Golang
@set AUTHOR WLHarvey4
@set EDITION 0.1
@set UPDATE-MONTH NOVEMBER, 2018 @c goes in the subtitle
@set COPYRIGHT-YEAR 2018
@set COPYRIGHT-HOLDER WLHARVEY4
@set ADDRESS1 Address Line 1
@set ADDRESS2 Address Line 2
@c -----------------------------------------------------------------------------








@c *****************************************************************************
@c BIBCITE MACROS
@c *****************************************************************************

@c need to load macros before header
@macro mybibsetrefnode{node}
@set mybibrefnode \node\
@end macro

@macro mybibnode{}
@value{mybibrefnode}
@end macro

@macro mybibusetable{node}
@set mybibtable true
@ifset mybiblist
@clear mybiblist
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibuselist{node}
@set mybiblist true
@ifset mybibtable
@clear mybibtable
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibcite{ref}
@inlineifclear{mybibrefnode, @mybibmakeref{mybibsetrefnode was not used, \ref\}}
@ifset mybibrefnode
@mybibmakeref{@mybibnode{}, \ref\}
@end ifset

@end macro

@macro mybibmakeref{node, ref}
(See item @cite{\ref\} in @ref{\ref\,,\node\}.)
@end macro

@macro mybibitem{ref}
@ifclear mybiblist
@ifclear mybibtable
@set mybiblist true
@end ifclear
@end ifclear

@ifset mybiblist
@item
@anchor{\ref\}[\ref\]
@end ifset

@ifset mybibtable
@item @anchor{\ref\}\ref\ ---
@end ifset

@end macro

@mybibusetable{Bibliography}

@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c FINALOUT / DRAFT / FORPRINT
@c *****************************************************************************

@set      DRAFT @i{DRAFT} @c when set, print DRAFT in heading
@c @clear DRAFT  @c when clear, don't print DRAFT in heading
@clear  FINALOUT @c when clear, show black boxes for overfull lines
@c @set FINALOUT @c when set, don't show black boxes for overfull lines
@clear  FORPRINT @c when clear, PDF output is for viewing, not printing
@c @set FORPRINT @c when set, PDF output is for printing, not viewing

@c -----------------------------------------------------------------------------
@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear

@iftex
@ifset FINALOUT @c don't show black boxes for final printout
@finalout
@end ifset
@end iftex

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@ifset FORPRINT
@ifset FINALOUT
@c @setchapternewpage odd
@end ifset
@end ifset

@c -----------------------------------------------------------------------------








@c *****************************************************************************
@c SECTIONING / INDICES
@c *****************************************************************************

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook


@c merge the function and variable indices into the concept index do so without
@c the code  font, and in the  index entries do the  font management ourselves.
@c Also  merge in  the chunk  definition and  reference entries,  which jrweave
@c creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c SPECIAL TEXIWEBJR COMMANDS
@c *****************************************************************************

@c Change how xref titles are quoted.
@dquotexrefs
@c And let braces in index entries work.
@allowindexbraces

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex


@c -----------------------------------------------------------------------------
@c INITIAL_SETUP
@c -----------------------------------------------------------------------------

@c The initial_setup code runs as a script in a BEGIN section of AWK during the
@c tangling  phase before  any files  are  extracted. Here  create a  directory
@c structure for project  files, plus any other initialization  that might need
@c to be done. Files are moved into directories in a @post_create command.

@c create a  basic Golang  workspace, with
@c bin and src directories.

@initial_setup
printf "${YELLOW}In initial_setup...${BLUEBOLD}\n"

ROOT=${PWD}
FILES="workspace"
SUBDIRS="src bin"

for subdir in ${SUBDIRS}
do
    ! [ -d ${ROOT}/${FILES}/${subdir} ] && {
       mkdir -vp ${ROOT}/${FILES}/${subdir} && \
       printf "${BLUEBOLD}created directory ${PURPLEBOLD}."$(basename ${ROOT})"/${FILES}/${subdir}${CLEAR}\n" || \
      printf "${RED}failed to create directory ${PURPLEBOLD}${ROOT}/${FILES}/${subdir}${CLEAR}\n"
    } || \
      printf "${BLUEBOLD}file ${PURPLEBOLD}."$(basename ${ROOT})"/${FILES}/${subdir} exists${CLEAR}\n"
done

printf "${YELLOW}Looking for ${CYAN}git repo...${CLEAR}"
if ! [ -e ./.git ]
then
        printf "${BLUE}initializing git repo${PURPLE}\n"
        git init
        [ -e ./.git ] && \
          printf "${GREEN}git initialized.${CLEAR}\n" || \
          printf "${RED}failed to initialize git.${CLEAR}\n"
else
        printf "${GREEN}found ${PURPLEBOLD}.git.${CLEAR}\n"
fi

printf "${YELLOW}looking for ${CYAN}.gitignore...${CLEAR}"
if ! [ -e ./.gitignore ]
then
        printf "${BLUE}creating...${CLEAR}"
        echo '.lodestone' > ./.gitignore
        [ -e ./.gitignore ] && \
          printf "${GREEN}created${PURPLEBOLD}.gitignore${CLEAR}\n" || \
          printf "${RED}failed${CLEAR}\n"
else
        printf "${GREEN}found ${PURPLEBOLD}.gitignore.${GREEN}\n"
fi

printf "${GREEN}initial setup done.${CLEAR}\n"

@end initial_setup
@c <------------------------------------->


@c END Special TexiwebJr Commands
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN PRINTED MATTER
@c --COPYING
@c --FRONT MATTER
@c   **TITLE PAGES
@c     ..Short Title
@c     ..Title Page
@c     ..Copyright Page
@c --MAIN MATTER
@c   **Top
@c     --- unpaginated ---
@c     ..General Introduction
@c     ..Menus
@c     ..Table of Contents
@c     --- paginated --- unnumbered ---
@c     ..Front Matter
@c       ~~Forward
@c       ~~Preface
@c     --- paginated --- numbered ---
@c     ..Main Matter
@c       ~~Chapters
@c         >>Sections
@c           ^^Subsections
@c             ##Subsubsections
@c     --- paginated --- lettered ---
@c       ~~Appendices
@c --BACK MATTER
@c   --- paginated --- unnumbered ---
@c   **Lists (Unnumbered)
@c     ..Bibliography
@c     ..Tables
@c     ..Indices
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN COPYING
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


@copying

@c <------------------------------------->
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>user@@example.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; YYYY, YYYY
Full name here
All Rights Reserved.</literallayout>
@end docbook
@c <------------------------------------->


@c <------------------------------------->
@ifnotdocbook
Copyright @copyright{} @value{COPYRIGHT-YEAR} @*
@value{COPYRIGHT-HOLDER} @*
All Rights Reserved.
@end ifnotdocbook
@c <------------------------------------->


@sp 1
The @value{TITLE} is copyrighted @copyright{} @value{COPYRIGHT-YEAR} by
@value{COPYRIGHT-HOLDER}.  It is published under the conditions of the GNU
General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.


@end copying
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN TITLEPAGE
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


@titlepage

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@title @value{TITLE}
@subtitle @value{SHORTTITLE} Edition @value{EDITION} (@value{UPDATE-MONTH})
@author @value{AUTHOR}


@c <------------------------------------->
@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
@value{AUTHOR} @*
@value{ADDRESS1} @*
@value{ADDRESS2} @*
@* @c etc.
Email: @EMAIL{user@@example.com,user AT example.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook
@c <------------------------------------->

@end titlepage
@c /////////////////////////////////////////////////////////////////////////////








@c =============================================================================
@c HEADINGS SETTINGS
@c =============================================================================

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN TOP
@c --General Introduction
@c --Main Menu
@c --Table of Contents
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@ifnottex
@ifnotdocbook
@ifnotxml

@c =============================================================================
@node Top
@top Golang
@c =============================================================================

This file documents @value{TITLE}, a language developed by Google for concurrent
web development.

@insertcopying

@end ifnotxml
@end ifnotdocbook
@end ifnottex




@c -----------------------------------------------------------------------------

@c <------------------------------------->

@c                MENUS
@menu

@detailmenu

@end detailmenu
@end menu
@c <------------------------------------->


@c <------------------------------------->
@c                 TOC

@c @summarycontents
@contents
@c <------------------------------------->


@c END Menus and Contents
@c /////////////////////////////////////////////////////////////////////////////







@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Front Matter
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>


@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN FRONT-MATTER
@c --Forward
@c --Preface
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@c *****************************************************************************
@c                                 FORWARD

@c @node Foreword
@c @unnumbered Foreword


@c END Forward
@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c                               PREFACE

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN Preface
@c --Audience
@c --Overviw
@c --Conventions
@c --Acknowledgements
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Preface
@unnumbered Preface

Text here.

@menu
* Audience::                    Who should read this @value{DOCUMENT}.
* Overview::                    An overview of the @value{DOCUMENT}.
* Conventions::                 Typographical conventions.
* Acknowledgements::            Acknowledgements.
@end menu




@c -----------------------------------------------------------------------------

@node Audience
@unnumberedsec Intended Audience

Who should read  this document?  First, what is literate  programming? To begin
this conversation, it is just as important to understand what it is not as what
it is. It is @emph{not}  @b{documentation}.  It is, rather, a @emph{programming
paradigm}, or  perhaps a @emph{programming  meta-language} sitting on top  of a
conventional programming language.  Here are a few quotes to set the context:

@quotation
@sansserif{Read your  first page: YOU  GOT IT TOTALLY  WRONG. Literate
programming is NOT about documentation in the first place.  All quotes
you  tore  out  speak  of  literate programming  as  if  it's  just  a
documentation system.  While it is not.}

@sansserif{Literate programming  is a PROGRAMMING PARADIGM,  or if you
wish a "META-LANGUAGE",  on top of machine-coding  language, which was
created with the purpose of: a) allowing humans to create abstractions
over abstractions over abstractions with  macros (which are phrases in
a human language  and if you wish are precise  "new operators" in that
meta-language, created  on the fly). b)  this system of macros  can be
created  not  in machine  demanded  order,  but  as need  for  logical
thinking.   Later  it  is  reshuffled  ("tangled",  i.e.   convoluted,
scrambled) from the natural into the inhuman machine codes.}

@sansserif{You  totally missed  the idea,  and  in the  case of  blind
leading  the   blind  quote  scores  of   other  misreaders.  Literate
programming is not  a documentation system per se,  it's a programming
paradigm.}

@author Astonished Reader @mybibcite{LitProg:Home}
@end quotation

It is literature  teaching people about a  very complex system, i.e.,  a set of
symbols intended for  humans about a set  of symbols intended for  a machine to
interpret and turn into action.

@quotation
@sansserif{Let us change our  traditional attitude to the construction
of programs: Instead of imagining that  our main task is to instruct a
computer what to do, let us  concentrate rather on explaining to human
beings what we want a computer to do.}
@author Donald Knuth @mybibcite{LitProg:Knuth}
@end quotation

@quotation
@sansserif{Literate programming  is the art of  preparing programs for
human readers.}
@author Norman Ramsey @mybibcite{LitProg:Ramsey}
@end quotation

Literate programming  is a  programming paradigm  or meta-language  that allows
greater abstraction than the programming language itself; it is a paradigm that
is based  upon the logical needs  and understandings of the  programming author
speaking to programming  readers (including him or herself), while  at the same
time,  in parallel,  it is  a  paradigm or  meta-language designed  to allow  a
computer system to  @emph{tangle} the programming author's ideas  into a system
that  is understood  and  processed by  a machine  according  to the  machine's
requirements: machine code.

In the case  of literate programming via the  @file{TexiWebJr} system, however,
there is the added advantage that  during the @emph{weaving} process the author
is producing two  dual abstractions for readers: @b{nodes}  (via an @file{Info}
file)  and  @b{sectioning}  (via   a  hyperlinked  @file{Pdf}  document),  each
inherently independent  yet working in concert  to produce at one  and the same
time  both graph-based  and chapter-based  output, each  with its  own inherent
strengths  and  advantages.  The  @file{TexiWebJr}  system  goes even  further,
however, in  producing a  third output which  is a hybrid  of both  systems, an
@acronym{HTML}  form (via  an @acronym{HTML}  web  site) that  combines both  a
sectioning output  and a graph-based  output.  You  have your choice  of graph,
sectioning, and combined,  all of which is fully  indexed and cross-referenced,
from one  source file.

It  is an  inherent aspect  of literate  programming that  there is  always one
source document,  so that by  changing any one part  of the system,  the author
updates all  forms of  output at  one and the  same time.   It is  perhaps this
aspect of  literate programming  that causes the  confusion with  thinking that
literate  programming  is  solely   about  @emph{documentation}.   In  reality,
however, that  is just one  aspect of literate  programming; the real  point of
literate programming  is that the author  can attack the problem  of creating a
complex system from an abstract logical position disconnected to a large degree
from the  requirements of  the computer  machine and present  the problem  to a
reader in a way  that will provide true understanding with  less effort than if
the reader had to understand the system from the computer's point of view

And finally, I use  literate programming as a form of  education.  It allows me
to  take a  complex situation  and break  it down  into hierarchies  of simpler
parts, but at  the same time provide links and  cross-references and indices to
tie the complex  system together into a web of  inter-related parts, which form
the whole.  Using this form of literate programming, I can create one big whole
system, and iteratively rework it into a web of inter-related parts that inform
my growing understanding  of the system as a whole,  while never destroying the
system's inherent  integrity to operate as  a functional machine.

In summary, I see the advantages of literate programming to be immense and that
far outweigh the  relatively high cost of  learning how to do it  (which is for
certain a life-long endeavor in itself).  Therefore, dear Reader, this document
is intended for human  consumption.  If you are a machine,  please refer to the
tangled mess that has  been prepared for you as source  code.  Whoever you are,
enjoy.  Cheers.



@c -----------------------------------------------------------------------------
@node Overview
@unnumberedsec What Is Covered

Overview text and chapter by chapter description here.


@c .....................................

@node The Readme
@unnumberedsubsec The Readme
@cindex readme

@(README.md@)=
# GOLANG

## About This Source File

This  document (`my_template.twjr`)  is  a *literate*  source  document. It  is
designed to produce an `Info` file (best read from within Emacs, but there is a
stand-alone Info  reader that can  be used),  a `Pdf` document  (generated from
LaTeX source  code by PDFTeX),  an `HTML` web  site, `Docbook` source  code, an
`XML`  document, and  a  plain text  document. In  addition.  it also  produces
working  code   in  any  language  (so   long  as  your  system   contains  the
infrastructure to  run the code). For  example, this `README` file  was drafted
within this source document  and extracted as a separate file,  as was also the
`Makefile`.  This *literate*  document's  features are  targeted  via a  custom
`Makefile` that is  also a part of  this document, and extracted  as a separate
file, and is dynamic in the sense that  if you update it, you can produce a new
version with  a simple call to  a `make` target. It  is designed to be  able to
produce any  number of working software  packages of any language  contained at
any  number of  different  locations on  your  system, all  with  a single  or,
alternatively, multiple `make` calls, depending on the granularity you need.

The Github  repository contains this  source document,  a Makefile that  can be
used  to work  with the  project, as  well as  a `Texinfo`  file that  has been
generated from  this `Twjr` file,  this README,  and a `.gitignore`  file. Most
computer systems have or can easily get the `make`, and `texinfo` programs that
are needed to  process the `Texinfo` file into the  various end documents, such
as `Info`,  `Pdf`, `HTML`, etc. Your  system will need, in  addition to `make`,
and `texinfo`, Gnu  AWK (`gawk`), and TexiwebJr to make  changes to this source
document and  process it  into a  `Texinfo` file and  extract its  programs and
files.  Your system  should also  have  the equivalent  of Bash  version 4,  as
version 4  has some parameter capabilities  that earlier versions do  not. Note
that most  versions of Mac OS  have version 3  of Bash installed as  a default.
Version 4 can be added using Homebrew or MacPorts very easily. In the past, Mac
OS has  also shipped with a  version of `texinfo`  that is below 6.5.  You will
also need to update `texinfo` to at least 6.5 if that is the case.

## How It Works

## Resources

* [TexiwebJr](https://github.com/arnoldrobbins/texiwebjr)
* [Texinfo](https://www.gnu.org/software/texinfo/)
* [Gnu AWK (gawk)](https://www.gnu.org/software/gawk/)
* [Gnu Bash](https://www.gnu.org/software/bash/)
* [TeX Live](https://www.tug.org/texlive/)

@




@c -----------------------------------------------------------------------------
@node Conventions
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo




@c -----------------------------------------------------------------------------

@c @node Acknowledgements
@c @unnumberedsec Acknowledgements

@c Acknowledgements go here.


@c END Preface
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN CHAPTERS
@c --Introduction
@c --Chapters 1-1
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%





@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Part I
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c *****************************************************************************
@c                              INTRODUCTION

@node Introduction
@unnumbered Introduction



@c -----------------------------------------------------------------------------

@node Installation
@section Installing Go
@cindex installation
@cindex download
@cindex downloads page

@url{https://golang.org/doc/install, Getting Started}

@heading Downloads Page

@url{https://golang.org/dl/, Downloads}

@anchor{Download}
@subheading Mac OS X Download

@url{https://dl.google.com/go/go1.11.2.darwin-amd64.pkg, Mac OS X Darwin AMD64}

After downloading a binary release suitable  for your system, please follow the
installation instructions.


@c .....................................

@node Installation Instructions
@subsection Installation Instructions
@cindex installation instructions

@heading Install the @code{go} tools.

@subheading From a Tarball

Download the  archive (@xref{Download}) and extract  it into @file{/usr/local},
creating a Go tree in @file{/usr/local/go}.  For example:

@example
tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz
@end example

Choose the archive file appropriate for your installation.  For instance, if you
are installing Go version  1.2.1 for 64-bit x86 on Linux,  the archive you want
is called @samp{go1.2.1.linux-amd64.tar.gz}.

Add @file{/usr/local/go/bin}  to the @env{PATH} environment  variable.  You can
do this  by adding  this line  to your  @file{/etc/profile} (for  a system-wide
installation) or @file{$HOME/.profile}:

@example
export PATH=$PATH:/usr/local/go/bin
@end example

@subheading Using the macOS package installer

Download the package file (@xref{Download}), open it, and follow the prompts to
install  the   Go  tools.   The  package  installs   the  Go   distribution  to
@file{/usr/local/go}.

The  package   should  put  the  @file{/usr/local/go/bin}   directory  in  your
@env{PATH} environment  variable.  You  may need to  restart any  open Terminal
sessions for the change to take effect.


@c .....................................

@node Test Your Environment
@subsection Test Your Environment

Check that Go is  installed correctly by setting up a  workspace and building a
simple program, as follows.

@heading Workspace Directory
@cindex workspace directory
@cindex @env{gopath}

Create  your workspace  directory, @file{$HOME/go}.   (If you'd  like to  use a
different  directory,  you  will  need  to  set  the  @env{GOPATH}  environment
variable.)

@subheading Hello Package

Next, make  the directory @file{src/hello}  inside your workspace, and  in that
directory create a file named @file{hello.go} that looks like:

@(hello.go@)=
package main

import "fmt"

func main() {
  fmt.Printf("Hello, world!\n")
}
@

@post_create hello.go printf "${YELLOW}processing \'hello.go\'${CLEAR}\n"; ! [ -e $PWD/workspace/src/hello ] && { printf "${PURPLEBOLD}"; mkdir -v $PWD/workspace/src/hello; }; printf "${BLUEBOLD}"; mv -v hello.go $PWD/workspace/src/hello; printf "${CLEAR}"

@c _____________________________________

@node Hello World
@subsubsection ``Hello, World!'' in Golang
@cindex hello, world

The following @file{Makefile} targets build, install, and run ``Hello, World!''
in Go.  There must  exist a  @dfn{workspace}, which is  defined as  a directory
structure containing  two directories: @file{src} and  @file{bin}. Packages are
placed  inside  the  @file{src}  directory, and  the  @env{GOPATH}  environment
variable must be set  to the workspace directory. One way  to process a package
in  Go  is  to  move  into  the package  directory  and  initiate  the  command
@command{go build}.  This will build an  executable next to the  souce file. To
place  the  executable  into  the @file{bin}  directory,  execute  the  command
@command{go  install}.  The   executable  can  be  run  by   typing  its  name:
@command{./hello} in the @file{bin} directory.

Another  way to  process  a package  is  to name  it as  an  argument from  the
workspace directory,  such as @samp{go  build hello}, @samp{go  install hello},
and @samp{go run hello}, for example. Executing the latter command will compile
and run the package, but will not save it. The target @command{run-hello-world}
does  it this  way, whereas  the  target @command{hello-world}  moves into  the
directories and compiles and runs the saved executable.

In  @file{Makefile}   terms,  the   targets  are:   @command{make  buildhello},
@command{make  installhello},  @command{make  hello-world},  and  @command{make
run-hello-world}.

@subheading Makefile Targets for Hello, World!

@<Makefile---Applications--Hook@>=
@<Makefile---Applications--Hello-Variables@>
@<Makefile---Applications--Hello-Phony Targets@>
@<Makefile---Applications--Hello-Hello Source@>
@<Makefile---Applications--Hello-Build Executable@>
@<Makefile---Applications--Hello-Install Executable@>
@<Makefile---Applications--Hello-Run Hello World@>
@<Makefile---Applications--Hello-Run Hello World Without Executable@>
@

@c _____________________________________

@node Hello World Variables
@subsubsection Hello World Variables

@<Makefile---Applications--Hello-Variables@>=
HELLO-SOURCE := $(ROOT)/$(FILES)/src/hello
HELLO-BIN    := $(ROOT)/$(FILES)/bin

@


@c _____________________________________

@node Hello World Phony Targets
@subsubsection Hello World Phony Targets

@<Makefile---Applications--Hello-Phony Targets@>=
.PHONY : hello.go build-hello install-hello hello-world run-hello-world

@

@c _____________________________________

@node Hello World Source File
@subsubsection Hello World Source File

If the source file  @file{hello.go} does not exist, or is  out of date compared
to the  @file{texi} file,  then it  must be sourced,  which is  accomplished by
calling  the  $(LODESTONE)  target  (@pxref{LODESTONE}) after  making  sure  the
@file{texi} source file is touched.

@<Makefile---Applications--Hello-Hello Source@>=
hello.go : $(HELLO-SOURCE)/hello.go
$(HELLO-SOURCE)/hello.go : $(FILE).twjr
	@printf "${YELLOW}Extracting the source file...${CLEAR}\n"
	@touch $(FILE).twjr
	@make $(LODESTONE)
	@printf "${GREEN}done extracting.${CLEAR}\n"

@

@c _____________________________________

@node Build Hello Target
@subsubsection Build Hello Target

To build  an executable, @command{cd} into  the package directory and  give the
command @samp{go build}. An executable will  be compiled and placed next to the
source file.

@<Makefile---Applications--Hello-Build Executable@>=
build-hello : $(HELLO-SOURCE)/hello
$(HELLO-SOURCE)/hello : $(HELLO-SOURCE)/hello.go
	@printf "${YELLOW}Building the executable...${CLEAR}"
	@cd $(HELLO-SOURCE) && go build && \
	    printf "${GREEN}done building.${CLEAR}\n" || \
	    printf "${RED}failed to build.${CLEAR}\n"

@

@c _____________________________________

@node Install Hello Target
@subsubsection Install Hello Target

To install  the executable, the  @command{go} tool can  be run from  within the
@file{src/hello} directory  after the executable  iss compiled in  the previous
step, then  executing the command  @command{go install}. This  physically moves
the executable into the @file{bin/} directory.

@<Makefile---Applications--Hello-Install Executable@>=
install-hello : $(HELLO-BIN)/hello
$(HELLO-BIN)/hello : $(HELLO-SOURCE)/hello.go $(FILE).twjr
	@printf "${YELLOW}Installing the executable...${CLEAR}"
	@cd $(HELLO-SOURCE) && go install && \
	    printf "${GREEN}done installing.${CLEAR}\n" || \
	    printf "${RED}failed to install.${CLEAR}\n"

@

@c _____________________________________

@node Run Hello World
@subsubsection Run Hello World

In this target, the @file{Makefile} first extracts the @file{hello.go} into the
@file{src/hello}, moves into that directory to compile @file{hello}, then moves
into that  directory again to  @command{install} the executble  in @file{bin/},
then finally moves into the  @file{bin/} directory and executes the executable,
@file{hello}.

@<Makefile---Applications--Hello-Run Hello World@>=
hello-world : $(HELLO-BIN)/hello $(FILE).twjr
	@printf "${YELLOW}running Hello World...${CLEAR}\n"
	@cd $(HELLO-BIN) && ./hello && \
	    printf "${GREEN}done saying.${CLEAR}\n" || \
	    printf "${RED}failed to say.${CLEAR}\n"

@

@c _____________________________________

@node Run Hello World Without Executable
@subsubsection Run Hello World Without Executable

In  this   target,  the  @file{Makefile}  extracts   @file{hello.go}  into  the
@file{src/hello} directory,  then immediately  invokes the  command @command{go
run hello} without  it actually needing an executable to  exist in @file{bin/}.
The  @command{go} tool  compiles  the @file{hello}  executable,  runs it,  then
discards it.

This can be directly observed by running the @command{hello-world}, above, then
deleting the executable, then  running this command, @command{run-hello-world}.
It can be  observed that the @file{Makefile} does not  explicitly recompile the
executable before running, and yet it still produces the correct output.

@<Makefile---Applications--Hello-Run Hello World Without Executable@>=
run-hello-world : $(HELLO-SOURCE)/hello.go $(FILE).twjr
	@printf "${YELLOW}running Hello World from $(ROOT)...${CLEAR}\n"
	@go run hello && \
	    printf "${GREEN}done running.${CLEAR}\n" || \
	    printf "${RED}failed to run.${CLEAR}\n"

@


@c END Chapter Introduction
@c /////////////////////////////////////////////////////////////////////////////






@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Part II
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c *****************************************************************************
@c                              CHAPTER ONE

@node Programming With Google Go
@chapter Programming With Google Go Specialization
@cindex Programming With Google Go Specialization
@cindex Specialization, Programming With Google Go

@quotation
This  specialization introduces  the Go  programming language  from Google  and
provides learners  with an overview  of Go's special features.  Upon completing
the three-course sequence,  learners will have gained the  knowledge and skills
needed to create concise, efficient, and clean applications using Go.
@author UC Irvine
@end quotation


@heading Welcome To The Specialization: Programming With Google Go

This intermediate-level, three-course sequence  is designed for individuals who
have had some experience programming in  another language but now wish to learn
about the  features and  capabilities of  Go. The courses  provide a  review of
essential  programming concepts,  as needed,  to ensure  that all  learners are
sufficiently comfortable  with the  basics before  learning about  the features
that are peculiar  to Go. (Please note that the  original specialization design
called for four courses but development  of the fourth course has been deferred
to a later  time. For now, please disregard the  occasional references that the
instructor makes to this fourth course.)

@subheading The Courses in the Specialization

@enumerate
@item
Getting Started With Go
@item
Functions, Methods, and Interfaces in Go
@item
Concurrency in Go
@end enumerate

The first course, @emph{Getting Started with Go}, introduces the basic elements
of the language including unique features such as slices that are not available
in other  programming environments.  @xref{Getting Started} The  second course,
@emph{Functions, Methods, and  Interfaces in Go}, expands your  knowledge of Go
with a focus on object-oriented features such as classes and encapsulation, and
allows   you  to   practice   writing  code   to   solve  practical   problems.
@xref{Functions   Methods  and   Interfaces}  The   third  and   final  course,
@emph{Concurrency in  Go}, shows you  how to write  Go code that  executes more
rapidly   through   parallel   execution   in   multi-processor   environments.
@xref{Concurrency}

@subheading The Instructor

The courses feature video lectures by  Professor Ian Harris from the University
of   California,   Irvine  and   are   accompanied   by  automatically   graded
multiple-choice quizzes  and peer-reviewed programming assignments.  While most
of the information needed to  complete the programming assignments is presented
within the context of the courses (i.e. by the lecturer), we encourage students
to  take  advantage  of  the  many resources  that  are  available  online  for
clarification and further learning.




@c -----------------------------------------------------------------------------
@c    			SECTION: Getting Started

@node Getting Started
@section Course One: Getting Started With Google Go
@cindex Getting Started With Google Go, First Course
@cindex Specialization, First Course

@heading About the Course
Learn  the  basics  of  Go,  an open  source  programming  language  originally
developed by a team  at Google and enhanced by many  contributors from the open
source  community.  This  course  is designed  for  individuals  with  previous
programming experience using  such languages as C, Python, or  Java, and covers
the fundamental elements of Go.  Topics include data types, protocols, formats,
and writing code that incorporates RFCs and JSON. Most importantly, you’ll have
a chance to practice writing Go  programs and receive feedback from your peers.
Upon completing  this course, you'll be  able to implement simple  Go programs,
which will prepare you for subsequent study at a more advanced level.

@url{https://www.coursera.org/learn/golang-getting-started/home/welcome,
Getting Started with Google Go}

@heading Welcome to Getting Started With Google Go From the Instructor

Welcome  to Getting  Started  with  Go! You’re  joining  thousands of  learners
currently enrolled in the course. I'm excited to have you in the class and look
forward to your contributions to the learning community.

To begin, I recommend  taking a few minutes to explore  the course site. Review
the material we’ll cover each week,  and preview the assignments you’ll need to
complete to  pass the  course. Click  Discussions to see  forums where  you can
discuss the course material with fellow students taking the class.

If you have questions  about course content, please post them  in the forums to
get help from  others in the course community. For  technical problems with the
Coursera platform, visit the Learner Help Center.

Good luck as you get started, and I hope you enjoy the course!

@subheading Welcome Video from the Instructor

Welcome to the course, Course One. The point of this course is to give you some
first-tier working knowledge of the Go language and how to use it. I'm assuming
that you  already have some experience  programming in other languages,  so I'm
not talking  from scratch  here. I'm assuming  you already have  seen a  lot of
these  concepts. You  know data  types, you  know things  like this,  but maybe
you're familiar with C or Python or Java or something like that and you want to
move over to Go. Maybe you want to start programming systems devices right. You
want to do  some more low-level stuff but  you don't want to go  straight to C,
let's say, or you've been dealing in C in a long time and you want your life to
be easier  right? Something like that.  In fact, Go on  the whole is a  sort of
sweet spot, where  it's efficient, close to  C, but it's also easy  to use like
say maybe Python or  Java, has a lot of that. So it's  in-between, and so we're
going to just hit  on all the basics in this class,  in this particular course,
and you should  be able to program something  and get a feel for it  and see if
you even like this language at all, and if you can be comfortable with it.


@c .....................................

@node Course One Syllabus
@subsection Course One Syllabus
@cindex syllabus, course one

@itemize
@item
Module 1: Getting Started with Go

This first module  gets you started with Go. You'll  learn about the advantages
of using  Go and begin  exploring the  language's features. Midway  through the
module,  you’ll take  a  break from  "theory" and  install  the Go  programming
environment on your computer.  At the end of the module,  you'll write a simple
program that displays “Hello, World” on your screen.

@itemize
@item
Overview
@item
Why Should I Learn Go? (Advantages of Go)
@item
Objects
@item
Concurrency
@item
Installing Go
@item
Workspaces & Packages
@item
Go Tool
@item
Variables
@item
Variable Initialization
@item
Peer Review · Module 1 Activity: "Hello, world!"
@item
Quiz · Module 1 Quiz
@end itemize

@item
Module 2: Basic Data Types

Now that you’ve set up your programming environment and written a test program,
you’re ready to dive  into data types. This module introduces  data types in Go
and gives you practice writing routines that manipulate different kinds of data
objects, including floating-point numbers and strings.

@itemize
@item
Overview
@item
Pointers
@item
Variable Scope
@item
Deallocating Memory
@item
Garbage Collection
@item
Comments, Printing, Integers
@item
Ints, Floats, Strings
@item
String Packages
@item
Constants
@item
Control Flow
@item
Control Flow, Scan
@item
Module 2 Activity: trunc.go
@item
Module 2 Activity: findian.go
@item
Module 2 Quiz
@end itemize

@item
Module 3: Composite Data Types

At this  point, we’re  ready to  move into more  complex data  types, including
arrays, slices,  maps, and structs.  As in the  previous module, you’ll  have a
chance to practice writing code that makes use of these data types.

@itemize
@item
Module 3 Overview
@item
Arrays
@item
Slices
@item
Variable Slices
@item
Hash Tables
@item
Maps
@item
Structs
@item
Peer Review · Module 3 Activity: slice.go
@item
Quiz · Module 3 Quiz
@end itemize

@item
Module 4: Protocols and Formats

This final  module of the  course introduces the  use of remote  function calls
(RFCs) and JavaScript Object Notation (JSON)  in Go. You’ll learn how to access
and  manipulate data  from external  files, and  have an  opportunity to  write
several routines using Go that exercise this functionality.

@itemize
@item
Module 4 Overview
@item
RFCs
@item
JSON
@item
File Access, ioutil
@item
File Access, os
@item
Peer Review · Module 4 Activity: makejson.go
@item
Peer Review · Module 4 Activity: makejson.go
@end itemize

@end itemize


@c .....................................

@node Installing Golang
@subsection Installing Golang
@cindex install golang

To help you get started with installing Golang, please visit Golang's web site
devoted to installing the language:

@url{https://golang.org/doc/install, Installing Golang}

Also, @xref{Download}, above.


@c .....................................

@node Testing Installation
@subsection Testing Your Installation
@cindex workspace

Check    that    Go    is    installed    correctly    by    setting    up    a
@dfn{workspace}@footnote{See  @url{https://golang.org/doc/code.html#Workspaces,
Workspace}.  A @emph{workspace}  is a directory hierarchy  with two directories
at its root:

@itemize
@item
@code{src} contains Go source files, and
@item
@code{bin} contains executable commands.
@end itemize

The @command{go} tool builds and installs binaries to the @file{bin} directory.

The  @code{src}  subdirectory  typically   contains  multiple  version  control
repositories (such as  for Git or Mercurial) that track  the development of one
or more source packages.

} and building a simple program, as follows.


@c .....................................

@node Module 1 --- Overview
@subsection Module 1 --- Overview
@cindex module 1 overview
@cindex overview

@heading Lecture Transcript

@subheading Why Go
Point of  this first  module is  to talk  about more  fully four  things. First
thing, is we want  to talk about Go, why it's good, why  is unique.  Right?  We
want to motivate you,  to just tell you why do you need  even learn this in the
first place  as compared to existing  languages because there are  many, right?
So, we'll  talk about  that.

@subheading Installing Go
Then, we'll  have you start using  Go.  So, this specifically  means installing
the Go  environment and compiling your  first program, you need  to get through
that before  you can  go on with  the rest  of the course.  So, we'll  walk you
through the installation process and show you  how to compile a program and see
if it works  as a sanity check  for the whole setup.

@subheading Code Organization; Workspace
Then, will  start talking  about the code  organization, the  recommended court
organization. So,  workspace, how you define  your workspace, how it  should be
organized, how Go  code is organized into  packages to allow you  to share. So,
big point  of Go is  sharing with other people.   Right?  Because if  you think
about any real software you write, it's always big.  Right? You work with other
people's. Almost never just you alone.  So,  you got to share and packages help
to make  that easy and  to organize the  code so you  can trade your  code with
other  people.

@subheading Variables
Then, at  the end of this  module, we'll start talking  about variables.  Start
talk about the language itself, so the variables, what types there are, and how
do you do scoping, how variable  scoping happens, how you basically resolve the
value of a variable depending on where it occurs and where it's defined.

@c _____________________________________

@node Advantages of Go
@subsubsection Advantages of Go

@itemize
@item
Runs fast
@item
Garbage collection
@item
Simple objects
@item
Concurrency
@item
@end itemize

@c _____________________________________

@node Objects in Go
@subsubsection Objects in Go
@cindex objects in go

@cindex structs
Go is  an object-oriented language, but  weakly object oriented.  It  has fewer
features  than you  would see  in  another object-oriented  language.  Go  uses
@def{structs}, not  classes, but  you can associate  methods with  the structs.
There is no inheritance in Go, no constructors, no generics.  This makes Go
easier to code and more efficient to run.

@c _____________________________________

@node Concurrency in Go
@subsubsection Concurrency in Go
@cindex concurrency

One of the  big advantages of Go  is its concurrency.  A lot  of the motivation
for concurrency comes from the need for speed.  Go helps get around performance
limitations.  @def{Concurrency} is the management of multiple tasks at the same
time.  Concurrent programming enables @def{parallelism}.  The programmer has to
decide how to partition the code.  Go has a lot of concurrency primitives built
into the language and efficiencly implemented.


@c .....................................

@node Module 2
@subsection Module 2


@c .....................................

@node Module 3
@subsection Module 3


@c .....................................

@node Module 4
@subsection Module 4




@c -----------------------------------------------------------------------------

@node Functions Methods and Interfaces
@section Course Two: Functions, Methods, and Interfaces in Go
@cindex Specialization, Course Two
@cindex Functions Methods and Interfaces

@heading About the Course
Continue your  exploration of the  Go programming  language as you  learn about
functions,  methods,  and  interfaces.  Topics include  the  implementation  of
functions,  function  types,  object-orientation  in  Go,  methods,  and  class
instantiation.  As  with the  first  course  in  this  series, you’ll  have  an
opportunity to create your own Go  applications so you can practice what you’re
learning.



@c -----------------------------------------------------------------------------

@node Concurrency
@section Concurrency in Go
@cindex Specialization, Course Three
@cindex Concurrency in Go

@heading About the Course
Learn  how to  implement concurrent  programming in  Go. Explore  the roles  of
channels  and goroutines  in implementing  concurrency. Topics  include writing
goroutines  and implementing  channels for  communications between  goroutines.
Course activities will  allow you to exercise Go’s  capabilities for concurrent
programming by developing several example programs.






@c END Chapter First
@c /////////////////////////////////////////////////////////////////////////////







@c *****************************************************************************
@c                        CHAPTER: Documentation

@node Go Documentation
@chapter Go Documentation
@cindex documentation

@cindex documentation home
@url{https://golang.org/doc/, Documentation}

@quotation
The Go programming language is an  open source project to make programmers more
productive.

Go is  expressive, concise,  clean, and  efficient. Its  concurrency mechanisms
make it easy to write programs that get the most out of multicore and networked
machines,  while its  novel type  system enables  flexible and  modular program
construction. Go  compiles quickly to machine  code yet has the  convenience of
garbage  collection  and  the  power  of  run-time  reflection.  It's  a  fast,
statically  typed,  compiled language  that  feels  like a  dynamically  typed,
interpreted language.
@author Golang Team
@end quotation

@itemize

@subheading Installing Go

@item
@url{https://golang.org/doc/install, Installing Go}

@subheading Learning Go

@cindex tour
@item
@url{https://tour.golang.org/, A Tour of Go}

@cindex syntix intro
@cindex data structures intro
@cindex methods
@cindex interfaces
@cindex concurrency primatives
An interactive introduction  to Go in three sections. The  first section covers
basic syntax and data structures;  the second discusses methods and interfaces;
and the  third introduces Go's  concurrency primitives. Each  section concludes
with a few exercises so you can  practice what you've learned. You can take the
tour online or install it locally with:

@cindex @command{tour} binary
@example
$ go get golang.org/x/tour
@end example

This  will  place  the  @file{tour}   binary  in  your  workspace's  @file{bin}
directory.

@cindex write go code
@item
@url{https://golang.org/doc/code.html, How To Write Go Code}

@cindex @command{go} command
@cindex packages
@cindex tests
Also    available   as    a   @url{https://www.youtube.com/watch?v=XCsL89YtqCs,
screencast}, this  doc explains how to  use the @url{https://golang.org/cmd/go/
@command{go command}} to fetch, build,  and install packages, commands, and run
tests.

@cindex editors
@cindex editor plugins
@cindex IDEs
@item
@url{https://golang.org/doc/editors.html, Editor Plugins and IDEs}

A  document that  summarizes  commonly used  editor plugins  and  IDEs with  Go
support.

@cindex effective go
@cindex writing go code
@item
@url{https://golang.org/doc/effective_go.html, Effective Go}

A document that  gives tips for writing  clear, idiomatic Go code.  A must read
for any new Go programmer. It augments the tour and the language specification,
both of which should be read first.

@cindex diagnostics
@item
@url{https://golang.org/doc/diagnostics.html, Diagnostics}

Summarizes tools and methodologies to diagnose problems in Go programs.

@cindex FAQ
@item
@url{https://golang.org/doc/faq, FAQ}

Answers to common questions about Go.

@cindex wiki
@item
@url{https://golang.org/wiki, Go Wiki}

A wiki maintained by the Go community.

@cindex learning resources
See the @url{https://golang.org/wiki/Learn, Learn page} at the Wiki for more Go
learning resources.

@subheading References

@item
@url{https://golang.org/pkg/, Package Documentation}

@cindex standard library
The documentation for the Go standard library.

@cindex command documentation
@item
@url{https://golang.org/doc/cmd, Command Documentation}

@cindex go tools, documentation
The documentation for the Go tools.

@cindex language specification
@cindex specification, language
@item
@url{https://golang.org/ref/spec, Language Specification}

The official Go Language specification.

@item
@url{https://golang.org/ref/mem, Memory Model}

A document that specifies the conditions under which reads of a variable in one
goroutine can  be guaranteed to observe  values produced by writes  to the same
variable in a different goroutine.

@item
@url{https://golang.org/doc/devel/release.html, Release History}

A summary of the changes between Go releases.

@cindex articles
@subheading Articles

@cindex go blog
@cindex blog on go
@item
@url{https://blog.golang.org/, Go Blog}

@item
Codewalk

@cindex tour of go
Guided tours of Go programs.

@itemize
@cindex functions, first class
@item
First-Class Functions in Go
@cindex Markov chain algorithm
@item
Generating arbitrary text: a Markov chain algorithm
@cindex memory
@item
Share Memory by Communicating
@cindex web applications, building
@item
Writing Web Applications - building a simple web application.
@end itemize

@item
Language

@itemize
@cindex json-rpc
@item
JSON-RPC: a tale of interfaces
@cindex syntax, declaration
@item
Go's Declaration Syntax
@cindex defer
@cindex panic
@cindex recover
@item
Defer, Panic, and Recover
@cindex concurrency patterns
@item
Go Concurrency Patterns: Timing out, moving on
@cindex slices
@item
Go Slices: usage and internals
@cindex interfaces
@cindex gif decoder
@item
A GIF decoder: an exercise in Go interfaces
@cindex error handling
@item
Error Handling and Go
@cindex organizing code
@item
Organizing Go code
@end itemize

@cindex packages
@item
Packages

@itemize
@cindex json package
@item
JSON and Go - using the json package.
@cindex gob package
@item
Gobs of data - the design and use of the gob package.
@cindex reflection
@cindex reflect package
@item
The Laws of Reflection - the fundamentals of the reflect package.
@cindex image package
@item
The Go image package - the fundamentals of the image package.
@cindex image/draw package
@item
The Go image/draw package - the fundamentals of the image/draw package.
@end itemize

@cindex tools
@item
Tools
@itemize
@cindex about, go
@item
About the Go command - why we wrote it, what it is, what it's not, and how to use it.
@cindex debugging
@cindex gdb
@item
Debugging Go Code with GDB
@cindex race detector
@item
Data Race Detector - a manual for the data race detector.
@cindex assembler
@item
A Quick Guide to Go's Assembler - an introduction to the assembler used by Go.
@cindex c, linking with
@item
C? Go? Cgo! - linking against C code with cgo.
@cindex godoc
@cindex documenting go code
@item
Godoc: documenting Go code - writing good documentation for godoc.
@cindex profiling
@item
Profiling Go Programs
@cindex race detector
@item
Introducing the Go Race Detector - an introduction to the race detector.
@end itemize

@subheading Talks

@cindex tour of go, video
@item
@url{https://research.swtch.com/gotour, A Video Tour of Go}

@cindex web crawler, build
Three things  that make Go  fast, fun, and productive:  interfaces, reflection,
and concurrency. Builds a toy web crawler to demonstrate these.

@item
@url{https://vimeo.com/53221560, Code That Grows With Grace}

@cindex code adaptability
One of Go's  key design goals is  code adaptability; that it should  be easy to
take a simple design and build upon it in a clean and natural way. In this talk
Andrew Gerrand describes a simple "chat  roulette" server that matches pairs of
incoming TCP connections, and then use Go's concurrency mechanisms, interfaces,
and standard  library to  extend it  with a web  interface and  other features.
While  the  function of  the  program  changes dramatically,  Go's  flexibility
preserves the original design as it grows.

@cindex concurrency patterns
@item
@url{https://www.youtube.com/watch?v=f6kdp27TYZs, Concurrency Patterns}

@cindex concurrency
@cindex network services
Concurrency is  the key  to designing high  performance network  services. Go's
concurrency primitives (goroutines and channels) provide a simple and efficient
means  of expressing  concurrent  execution. In  this talk  we  see how  tricky
concurrency problems can be solved gracefully with simple Go code.

@item
@url{https://www.youtube.com/watch?v=QDDwwePbDtw,      Advanced     Concurrency
Patterns}

@end itemize


@c END CHAPTERS
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN APPENDICES
@c --The Makefile
@c --Code Chunk Summaries
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Appendices
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c *****************************************************************************
@c                              THE MAKEFILE

@node The Makefile
@appendix The Makefile
@cindex makefile

The @file{Makefile} has five initial top-level targets built in as defaults:

@enumerate

@item
Variable Definitions

@itemize
@item
FILE: the name of this source document, without extension
@item
ROOT: the  name of the  root directory, which  defaults to the  present working
directory, $(PWD)
@item
FILES: the  name of  the root directory  for the files  created in  this source
document, which defaults to @file{files}
@item
LODESTONE: a reference file to help @file{Makefile} determine when to recompile
this source document or the @file{TEXI} file
@end itemize

@item
The Default Target: @command{twjr}, described below

@item
The TWJR Targets

@table @command
@item twjrkeep
@command{jrtangle jrweave info pdf html}
@item twjr
@command{twjrkeep dirclean}
@item jrtangle
@command{jrtangle $(FILE).twjr}
@item
@command{jrweave $(FILE).twjr > $(FILE).texi}
@item newmakefile
@command{jrtangle allclean}
@end table

@item
The Clean Targets

@enumerate
@item
Clean
@item
Dirclean
@item
Distclean
@item
Allclean
@end enumerate

@item
The Applications Hook

@end enumerate




@(Makefile@)=
# MAKEFILE FILE CHUNKS
######################

@<Makefile---Variable Definitions@>
@<Makefile---Default Target@>
@<Makefile---TWJR Targets@>
@<Makefile---Clean Targets@>
@<Makefile---Applications@>

@




@c -----------------------------------------------------------------------------

@node Makefile Variable Definitions
@appendixsec Makefile Variable Definitions

The @env{SHELL} variable is included because some shell commands depend upon
Bash version 4, which is not native on my system.

The @env{ROOT} variable is designed to allow you to to extract the source files
(not the @acronym{TEXI}, @acronym{INFO}, @acronym{PDF} or @acronym{HTML} files,
but  the  programs defined  inside  the  @acronym{TWJR}  file) to  a  directory
structure outside of the your  ``present working directory'' (@env{PWD}) should
that be something you want to do, i.e., for production purposes.

The @code{FILE} variable  is the name of this source  @code{TWJR} file, without
extension.

The @code{FILES} variable is the name of  the root directory for the files that
are extracted during the @emph{tangling} phase.  This directory goes underneath
the @file{ROOT} directory.  Feel free to name this whatever you want.

The @code{LODESTONE}  variable is an empty  reference file that is  used solely
for its  modification time  to help  the Makefile  determine when  to recompile
(i.e., @emph{tangle} and @emph{weave}) the  source @file{TWJR} file.  It should
not be changed or otherwise touched (pun intended).

@<Makefile---Variable Definitions@>=
# VARIABLE DEFINITIONS
######################
LODESTONE := .lodestone
README    := README.md
GIT       := .git*

SHELL := $$(which bash)

FILE  := Golang
ROOT  := $(PWD)
FILES := workspace

@




@c -----------------------------------------------------------------------------

@node Makefile Default Target
@appendixsec Default Target
@cindex default target

The @code{default} target  extracts all source files and moves  them into their
proper  directories,  and  processes  the   @code{TEXI}  source  file  into  an
@code{INFO}  file, a  @code{PDF} document,  and an  @code{HTML} web  site. This
process automatically updates the TEXI's nodes and sectioning commands prior to
generating  the   INFO,  PDF,  and   HTML  documents.    What  used  to   be  a
manually-intensive process is now completely  automated through a Makefile that
is extracted from the @code{TWJR}  source.

This  automated  process  depends   upon  the  programmer's  system  containing
@file{GNU   AWK}  (for   the   primary  literate   programming  operations   of
@emph{tangling}   and   @emph{weaving}@footnote{No  other   implementation   of
@file{AWK}  will  work}),   @file{make}  (to  control  the   build  and  output
processes@footnote{While I haven't tested it, just about any @file{make} should
work}),  @file{Texinfo} of  at least  version 6.5  (for the  processing of  the
@file{TEXI} output file), @file{makeinfo} (to produce the @file{INFO} file from
the @file{TEXI}  file), and @file{Emacs}  (for the automatic updating  of nodes
and sectioning  command@footnote{Again, while I  haven't tested it,  just about
any @file{Emacs}  should work}).   With these  dependencies, everything  can be
compiled with a single call to @command{make} with no argument:

@example
$ make
@end example

Individual files and documents can also be targeted with simple calls such as:

@example
$ make html

$ make openhtml

$ make pdf

$ make openpdf

$make info

$ make openinfo

$ make distclean

$ make allclean
@end example

@noindent and so forth (just name a few).

The target  @code{twjr} is  the default, and  does everything  explicitly.  The
target @code{weave}  (or alternatively @code{texi})  will run just  the command
@command{jrweave}  on the  @file{TWJR} file  to produce  the @file{TEXI}  file,
which  is  directly  responsible  for  producing  the  output  files.   If  the
@file{TWJR}  source  file has  been  modified,  then @command{maked}  will  run
@command{jrtangle} first to update all source documents.

@<Makefile---Default Target@>=
# DEFAULT Target
################
.PHONY : TWJR JRTANGLE TANGLE JRWEAVE WEAVE TEXI INFO PDF HTML DIST
.PHONY : default twjr twjrkeep jrtangle tangle
.PHONY : jrweave weave texi info pdf html newmakefile dist
.PHONY : files

default : TWJR

@




@c -----------------------------------------------------------------------------

@node Makefile TWJR Targets
@appendixsec TWJR Targets
@cindex TWJR targets

These targets are all related to processing the main source @acronym{TWJR} file
in some  way. The @file{make} target  @command{twjr} is the default  target and
runs each of the processes  @command{jrtangle} and @command{jrweave} to produce
source files,  a @acronym{TEXI} file,  an @acronym{INFO} file,  a @acronym{PDF}
document, and an @acronym{HTML} web site.  It only sources what is necessary as
@file{make} is designed to do.  Note that at this time, @emph{weaving} includes
automatic  menu and  node  updating  of the  @acronym{TEXI}  file,  so that  an
@acronym{INFO} file  can also be  generated without needing to  manually update
the  @acronym{TEXI} file  first  as used  to be  the  case. @file{make}  target
@code{info}     runs     @command{makeinfo},     target     @code{pdf}     runs
@command{pdftexi2dvi}, and target @code{html} runs @command{makeinfo --html}.

The default @file{twjr} target deletes all extraneous build and log files prior
to finishing.   If you want  to retain  the build and  log files, then  run the
target @file{twjrkeep} instead.

The  file  @file{.lodestone}   is  used  to  set  a  reference   time  for  the
@acronym{TWJR} file,  so that  if the @acronym{TWJR}  file changes,  new source
documents will be generated; otherwise, it  will simply be left alone. In other
words, if @file{.lodestone}  is older than @file{.twjr},  then @file{.twjr} has
been modified, and it should be @emph{tangled} and @emph{woven} first.  If it is
newer, then @command{make} will not recompile.

Should the @file{Makefile}  portion of the @file{TWJR} be modified,  then it is
important to  obtain a fresh copy  of the @file{Makefile} prior  to running any
target; therefore,  use the target  @command{make newmakefile} first,  then run
any desired target.

@<Makefile---TWJR Targets@>=
# TWJR TARGETS
##############

# <------------------------------------->
#               twjrkeep

# Process everything; don't remove any build or log files;
twjrkeep : jrtangle jrweave info pdf html


# <------------------------------------->
#                 TWJR
#                DEFAULT

# Process everything; remove build files and logs.

TWJR : twjr
twjr : twjrkeep dirclean


# <------------------------------------->
#               JRTANGLE

# JRTANGLE depends upon the LODESTONE and the ROOT FILES directory;
# if either is missing or out of date, then JRTANGLE will be run to
# extract its files.

JRTANGLE : TANGLE
TANGLE   : jrtangle
jrtangle : tangle
tangle   : $(LODESTONE) files

@

@anchor{LODESTONE}
@<Makefile---TWJR Targets@>=
# <------------------------------------->
#               LODESTONE

# Checks the relative time to determine if JRTANGLE should be rerun

$(LODESTONE) : $(FILE).twjr
	@printf "${YELLOW}Tangling $(FILE)...${CLEAR}\n"
	@jrtangle $(FILE).twjr
	@touch $(LODESTONE)
	@printf "${GREEN}done tangling.${CLEAR}\n"


# <------------------------------------->
#                files

# Checks for  the existence  of the ROOT/FILES  directory; extracts  files into
# them if they don't  exist or are out of date; they must  be retouched if they
# exist but  are out of date  because they will  not be remade or  updated when
# files are extracted into them

files : $(ROOT)/$(FILES)
$(ROOT)/$(FILES) :  $(FILE).twjr
	@printf "${YELLOW}Creating files...${CLEAR}\n"
	@touch $(FILE).twjr
	@make $(LODESTONE)
	@touch $(ROOT)/$(FILES)
	@printf "${GREEN}done creating files.${CLEAR}\n"


# <------------------------------------->
#              newmakefile

# Extracts the Makefile if necessary by tangling; everything else
# is thereafter deleted

newmakefile : $(LODESTONE) allclean


# <------------------------------------->
#              JRWEAVE

# Extracts the TEXI, and updates the nodes and sections with a batch call to
# Emacs; it depends upon TWJR

JRWEAVE : WEAVE
WEAVE   : TEXI
TEXI    : jrweave
jrweave : weave
weave   : texi
texi    : $(FILE).texi
$(FILE).texi : $(FILE).twjr
	@printf "${YELLOW}Weaving $(FILE)...${CLEAR}\n"
	@jrweave $(FILE).twjr > $(FILE).texi
	@printf "${GREEN}done weaving.${CLEAR}\n";
	@printf "${YELLOW}updating $(FILE)'s menus and nodes...${CLEAR}\n"
	@emacs --batch --eval '(progn (find-file "./$(FILE).texi" nil) \
	  (texinfo-master-menu 1) (save-buffer 0))' 2> batch.log
	@printf "${GREEN}done updating.${CLEAR}\n"


# <------------------------------------->
#                 DIST

# Runs jrtangle jrweave distclean; prepares for git commit

DIST : dist
dist : jrtangle jrweave distclean


# <------------------------------------->
#                 INFO
#               OPENINFO

# Runs makeinfo on the TEXI file;
# Opens the INFO file in Emacs

INFO : info
info : $(FILE).info
$(FILE).info : $(FILE).texi
	@printf "${YELLOW}Creating an INFO file...${CLEAR}\n"
	@makeinfo $(FILE).texi
	@printf "${GREEN}done${CLEAR}\n"
openinfo : INFO
	@printf "${YELLOW}Opening INFO in Emacs...${CLEAR}\n"
	@emacsclient -s server --eval '(info "($(ROOT)/$(FILE).info)top")'
	@printf "${GREEN}done${CLEAR}\n"


# <------------------------------------->
#                  PDF
#                OPENPDF

# Runs pdftexi2dvi on the TEXI file;
# Opens the PDF file

PDF : pdf
pdf : $(FILE).pdf
$(FILE).pdf : $(FILE).texi
	@printf "${YELLOW}Creating a PDF file...${CLEAR}\n"
	@pdftexi2dvi --build=tidy --build-dir=build --quiet $(FILE).texi
	@printf "${GREEN}done${CLEAR}\n"
openpdf : PDF
	@printf "${YELLOW}Opening PDF...${CLEAR}\n"
	@open $(FILE).pdf
	@printf "${GREEN}done${CLEAR}\n"


# <------------------------------------->
#                 HTML
#               OPENHTML

# Runs makeinfo --html on the TEXI file;
# Opens index.html in a browser

HTML : html
html : $(FILE)/index.html
$(FILE)/index.html : $(FILE).texi
	@printf "${YELLOW}Creating an HTML directory...${CLEAR}\n"
	@makeinfo --html $(FILE).texi
	@printf "${GREEN}done${CLEAR}\n"
openhtml : HTML
	@printf "${YELLOW}Opening INDEX.HTML in the browser...${CLEAR}\n"
	@open $(FILE)/index.html
	@printf "${GREEN}done${CLEAR}\n"

@




@c -----------------------------------------------------------------------------

@node Makefile Clean Targets
@appendixsec Makefile Clean Targets
@cindex Makefile clean targets

The @command{clean} target removes  backup files. The @command{dirclean} target
removes build  directories and log  files, but  not source files  (those inside
@file{files} directory,  e.g., @file{bin/} and and  @file{src/}) and associated
files and  programs inside  them.  The  @command{distclean} target  removes the
@acronym{INFO}, @acronym{PDF},  @acronym{HTML}, and @acronym{source}  files and
directories, leaving just  the @file{TWJR} file, the @file{TEXI}  file, and the
@file{Makefile}.  Finally,  the  @command{allclean} target  removes  everything
except the @acronym{TWJR} file and the @file{Makefile}.

@<Makefile---Clean Targets@>=
# CLEAN TARGETS
################
.PHONY : clean dirclean distclean allclean

# <------------------------------------->
#                clean

# remove backup files

clean :
	@printf "${WHITEBOLD}Cleaning...${CYAN}\n"
	@rm -f *~ .*~ #*#
	@printf "${GREEN}done cleaning.${CLEAR}\n"


# <------------------------------------->
#               dirclean

# after clean:  remove all  build and miscellaneous  files, leaving  only TWJR,
# TEXI,  INFO, HTML,  PDF,  Makefile,  README, .git,  .gitignore  & the  source
# documents.

dirclean : clean
	@printf "${WHITEBOLD}Dir-cleaning...${CYAN}\n"
	@for file in *; do         \
	  case $$file in           \
            '.' | '..')          ;;\
	    $(FILE)* | Makefile) ;;\
	    $(FILES)*)	 	 ;;\
	    $(LODESTONE))        ;;\
	    $(README))		 ;;\
	    $(GIT))		 ;;\
	    *) rm -vfr $$file	 ;;\
	  esac                     \
	done
	@printf "${GREEN}done dir-cleaning.${CLEAR}\n"


# <------------------------------------->
#                distclean

# after dirclean: remove INFO, HTML, and PDF, and FILES

distclean : dirclean
	@printf "${WHITEBOLD}Dist-cleaning...${CYAN}\n"
	@rm -vfr $(FILE) $(FILE).info $(FILE).pdf $(ROOT)/$(FILES)
	@printf "${GREEN}done dist-cleaning.${CLEAR}\n"


# <------------------------------------->
#                allclean

# allclean: remove TEXI, leaving only TWJR and Makefile

allclean : distclean
	@printf "${WHITEBOLD}Cleaning all...${CYAN}\n"
	@rm -vfr $(FILE).texi
	@printf "${GREEN}done cleaning all.${CLEAR}\n"

@




@c -----------------------------------------------------------------------------

@node Makefile Applications
@appendixsec Makefile Applications
@cindex Makefile applications

Place any targets for running  code-specific commands here, such as executables
in the @file{bin/} directory.  The file @verb{|@<Makefile---Applicaionts@>|} is
a hook  that can  be used in  another part  of the source  document; this  is a
fundamental feature of literate programming.

@<Makefile---Applications@>=
# APPLICATION TARGETS
######################

@<Makefile---Applications--Hook@>

@


@c END The Makefile
@c /////////////////////////////////////////////////////////////////////////////







@c *****************************************************************************
@c                        CODE CHUNK SUMMARIES

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@menu
* File Definitions::          Source files by definition.
* Code Chunk Definitions::    Code chunks by definition.
* Code Chunk References::     Code chunks by reference.
@end menu




@c -----------------------------------------------------------------------------
@node File Definitions
@appendixsec Source File Definitions

@print_file_defs




@c -----------------------------------------------------------------------------
@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs




@c -----------------------------------------------------------------------------
@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs


@c END Code Chunk Summaries
@c /////////////////////////////////////////////////////////////////////////////







@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN END MATTER
@c --Bibliography
@c --Tables
@c --Indices
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Back Matter
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c *****************************************************************************
@c                                BIBLIOGRAPHY

@node @mybibnode{}
@unnumbered Bibliography

@table @asis

@mybibitem{LitProg:Home}
"On Misreadings", email, January 2009 @url{http://www.literateprogramming.com/}

@mybibitem{LitProg:Knuth}
@url{``Literate Programming (1984)'' in Literate Programming. CSLI, 1992, pg.
99.}

@mybibitem{LitProg:Ramsey}
@url{ahttps://www.cs.tufts.edu/~nr/noweb/}

@end table


@c END Bibliography
@c /////////////////////////////////////////////////////////////////////////////







@c *****************************************************************************
@c                             LIST OF TABLES

@node List of Tables
@unnumbered List of Tables

@listoffloats Table


@c END Lists
@c /////////////////////////////////////////////////////////////////////////////







@c  *****************************************************************************
@c                               CONCEPT INDEX

@node Concept Index
@unnumbered Index

@printindex cp


@c END Indices
@c /////////////////////////////////////////////////////////////////////////////








@bye

TODO:
